/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as AdminAuthenticatedRouteImport } from './routes/admin/_authenticated/route'
import { Route as AdminAuthRouteImport } from './routes/admin/_auth/route'
import { Route as AdminAuthenticatedIndexImport } from './routes/admin/_authenticated/index'
import { Route as AdminAuthRegisterImport } from './routes/admin/_auth/register'
import { Route as AdminAuthLoginImport } from './routes/admin/_auth/login'

// Create Virtual Routes

const AdminImport = createFileRoute('/admin')()

// Create/Update Routes

const AdminRoute = AdminImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AdminAuthenticatedRouteRoute = AdminAuthenticatedRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => AdminRoute,
} as any)

const AdminAuthRouteRoute = AdminAuthRouteImport.update({
  id: '/_auth',
  getParentRoute: () => AdminRoute,
} as any)

const AdminAuthenticatedIndexRoute = AdminAuthenticatedIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminAuthenticatedRouteRoute,
} as any)

const AdminAuthRegisterRoute = AdminAuthRegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => AdminAuthRouteRoute,
} as any)

const AdminAuthLoginRoute = AdminAuthLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AdminAuthRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminImport
      parentRoute: typeof rootRoute
    }
    '/admin/_auth': {
      id: '/admin/_auth'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminAuthRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/_authenticated': {
      id: '/admin/_authenticated'
      path: ''
      fullPath: '/admin'
      preLoaderRoute: typeof AdminAuthenticatedRouteImport
      parentRoute: typeof AdminImport
    }
    '/admin/_auth/login': {
      id: '/admin/_auth/login'
      path: '/login'
      fullPath: '/admin/login'
      preLoaderRoute: typeof AdminAuthLoginImport
      parentRoute: typeof AdminAuthRouteImport
    }
    '/admin/_auth/register': {
      id: '/admin/_auth/register'
      path: '/register'
      fullPath: '/admin/register'
      preLoaderRoute: typeof AdminAuthRegisterImport
      parentRoute: typeof AdminAuthRouteImport
    }
    '/admin/_authenticated/': {
      id: '/admin/_authenticated/'
      path: '/'
      fullPath: '/admin/'
      preLoaderRoute: typeof AdminAuthenticatedIndexImport
      parentRoute: typeof AdminAuthenticatedRouteImport
    }
  }
}

// Create and export the route tree

interface AdminAuthRouteRouteChildren {
  AdminAuthLoginRoute: typeof AdminAuthLoginRoute
  AdminAuthRegisterRoute: typeof AdminAuthRegisterRoute
}

const AdminAuthRouteRouteChildren: AdminAuthRouteRouteChildren = {
  AdminAuthLoginRoute: AdminAuthLoginRoute,
  AdminAuthRegisterRoute: AdminAuthRegisterRoute,
}

const AdminAuthRouteRouteWithChildren = AdminAuthRouteRoute._addFileChildren(
  AdminAuthRouteRouteChildren,
)

interface AdminAuthenticatedRouteRouteChildren {
  AdminAuthenticatedIndexRoute: typeof AdminAuthenticatedIndexRoute
}

const AdminAuthenticatedRouteRouteChildren: AdminAuthenticatedRouteRouteChildren =
  {
    AdminAuthenticatedIndexRoute: AdminAuthenticatedIndexRoute,
  }

const AdminAuthenticatedRouteRouteWithChildren =
  AdminAuthenticatedRouteRoute._addFileChildren(
    AdminAuthenticatedRouteRouteChildren,
  )

interface AdminRouteChildren {
  AdminAuthRouteRoute: typeof AdminAuthRouteRouteWithChildren
  AdminAuthenticatedRouteRoute: typeof AdminAuthenticatedRouteRouteWithChildren
}

const AdminRouteChildren: AdminRouteChildren = {
  AdminAuthRouteRoute: AdminAuthRouteRouteWithChildren,
  AdminAuthenticatedRouteRoute: AdminAuthenticatedRouteRouteWithChildren,
}

const AdminRouteWithChildren = AdminRoute._addFileChildren(AdminRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof AdminAuthenticatedRouteRouteWithChildren
  '/admin/login': typeof AdminAuthLoginRoute
  '/admin/register': typeof AdminAuthRegisterRoute
  '/admin/': typeof AdminAuthenticatedIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/admin': typeof AdminAuthenticatedIndexRoute
  '/admin/login': typeof AdminAuthLoginRoute
  '/admin/register': typeof AdminAuthRegisterRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteWithChildren
  '/admin/_auth': typeof AdminAuthRouteRouteWithChildren
  '/admin/_authenticated': typeof AdminAuthenticatedRouteRouteWithChildren
  '/admin/_auth/login': typeof AdminAuthLoginRoute
  '/admin/_auth/register': typeof AdminAuthRegisterRoute
  '/admin/_authenticated/': typeof AdminAuthenticatedIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/admin' | '/admin/login' | '/admin/register' | '/admin/'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/admin' | '/admin/login' | '/admin/register'
  id:
    | '__root__'
    | '/'
    | '/admin'
    | '/admin/_auth'
    | '/admin/_authenticated'
    | '/admin/_auth/login'
    | '/admin/_auth/register'
    | '/admin/_authenticated/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminRoute: typeof AdminRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRoute: AdminRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/admin"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/admin": {
      "filePath": "admin/_auth",
      "children": [
        "/admin/_auth",
        "/admin/_authenticated"
      ]
    },
    "/admin/_auth": {
      "filePath": "admin/_auth/route.tsx",
      "parent": "/admin",
      "children": [
        "/admin/_auth/login",
        "/admin/_auth/register"
      ]
    },
    "/admin/_authenticated": {
      "filePath": "admin/_authenticated/route.tsx",
      "parent": "/admin",
      "children": [
        "/admin/_authenticated/"
      ]
    },
    "/admin/_auth/login": {
      "filePath": "admin/_auth/login.tsx",
      "parent": "/admin/_auth"
    },
    "/admin/_auth/register": {
      "filePath": "admin/_auth/register.tsx",
      "parent": "/admin/_auth"
    },
    "/admin/_authenticated/": {
      "filePath": "admin/_authenticated/index.tsx",
      "parent": "/admin/_authenticated"
    }
  }
}
ROUTE_MANIFEST_END */
